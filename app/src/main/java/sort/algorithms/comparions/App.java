/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sort.algorithms.comparions;

import sort.algorithms.comparions.implementations.BubbleSort;
import sort.algorithms.comparions.implementations.QuickSort;
import sort.algorithms.comparions.interfaces.ISortAlgorithm;
import sort.algorithms.comparions.utils.FileCreator;
import sort.algorithms.comparions.utils.InputCreator;

import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class App {
    private static BubbleSort bubbleSort = new BubbleSort();
    private static QuickSort quickSort = new QuickSort();


    public static void main(String[] args) throws IOException {
        try {
            final int size = 100000;


            createInputFiles(size);

//            System.out.println("Measuring Quick sort");
//            QuickSort quickSort = new QuickSort();
//            measureSortAlgorithm(quickSort, quickNumbers);

//            System.out.println("Measuring Merge Sort");
//            MergeSort mergeSort = new MergeSort();
//            measureSortAlgorithm(mergeSort, mergeNumbers);

            System.out.println("Measuring Bubble Sort");
            BubbleSort bubbleSort = new BubbleSort();
            measureSortAlgorithm(bubbleSort, numbers);
        } catch(Exception ex) {
            System.out.println(ex.getMessage());
        }


    }

    private static void createInputFiles(int size) throws IOException {
        final String folder = "/Users/estevaowatanabe/Desktop/projects/sort-algorithms-comparions";
        //bubble sort
        Map<String, int[]> inputs = new HashMap<>();

        //bubble sort
        int[] bestCaseBubbleSort = InputCreator.createOrderedAscInputs(size);
        int[] averageCaseBubbleSort = InputCreator.createRandomInputs(size);
        int[] worstCaseBubbleSort = InputCreator.createOrderedDescInputs(size);

        inputs.put("bubbleSort/best_case.txt", bestCaseBubbleSort);
        inputs.put("bubbleSort/average_case.txt", averageCaseBubbleSort);
        inputs.put("bubbleSort/worst_case.txt", worstCaseBubbleSort);

        //quicksort
        int[] bestCaseQuickSort = InputCreator.createOrderedAscInputs(size);
        int[] averageCaseQuickSort = InputCreator.createRandomInputs(size);
        int[] worstCaseQuickSort = InputCreator.createOrderedDescInputs(size);

        inputs.put("quickSort/best_case.txt", bestCaseQuickSort);
        inputs.put("quickSort/average_case.txt", averageCaseQuickSort);
        inputs.put("quickSort/worst_case.txt", worstCaseQuickSort);

        //mergesort
        int[] bestCaseMergeSort = InputCreator.createOrderedAscInputs(size);
        int[] averageCaseMergeSort = InputCreator.createRandomInputs(size);
        int[] worstCaseMergeSort = InputCreator.createOrderedDescInputs(size);

        inputs.put("mergeSort/best_case.txt", bestCaseMergeSort);
        inputs.put("mergeSort/average_case.txt", averageCaseMergeSort);
        inputs.put("mergeSort/worst_case.txt", worstCaseMergeSort);

        inputs.forEach((fileName, input) -> {
            String content = formatInputs(input);
            String pathFile = folder + "/" + fileName;

            try {
                FileCreator.createFile(pathFile, content);
            } catch(IOException e) {
                System.out.println("ERROR CREATING THE FILE: " + pathFile);
            }

        });
    }

    private static String formatInputs(int[] input) {
        String[] inputStringified = Arrays.stream(input)
                .mapToObj(String::valueOf)
                .toArray(String[]::new);

        return String.join(",", inputStringified);
    }


    private static void measureSortAlgorithm(ISortAlgorithm algorithm, int[] numbers) {
        Instant startInstant = Instant.now();

        int[] sortedNumbers = algorithm.sort(numbers);
        Instant endInstant = Instant.now();

        Duration duration = Duration.between(startInstant, endInstant);
        long durationInNanos = duration.toNanos();
        long durationInMillis = duration.toMillis();
        long durationInSeconds = duration.toSeconds();

        System.out.println("TIME ELAPSED");
        System.out.println("NANOSECONDS: " + durationInNanos);
        System.out.println("MILLISECONDS: " + durationInMillis);


        System.out.println();
    }

}
